// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_LOCAL")
}

// User model
model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String?
  role          String    // admin, team, client, user
  avatar        String?
  position      String?
  department    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  tasks         Task[]    @relation("TaskAssignee")
  createdTasks  Task[]    @relation("TaskCreator")
  comments      Comment[]
  timeEntries   TimeEntry[]
  teamProjects  Project[] @relation("ProjectTeam")
  clientProjects Project[] @relation("ProjectClient")
  notifications Notification[]
  activityLogs  ActivityLog[]
}

// Project model
model Project {
  id          Int       @id @default(autoincrement())
  name        String
  description String    @db.Text
  status      String    // Not Started, In Progress, On Hold, Completed, Cancelled
  progress    Int
  startDate   DateTime
  deadline    DateTime
  budget      Float?
  spent       Float?
  priority    String    // Low, Medium, High, Urgent
  tags        String?   // Comma separated values
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  client      User?     @relation("ProjectClient", fields: [clientId], references: [id])
  clientId    String?
  team        User[]    @relation("ProjectTeam")
  tasks       Task[]
}

// Task model
model Task {
  id             Int       @id @default(autoincrement())
  title          String
  description    String    @db.Text
  status         String    // Not Started, In Progress, Under Review, On Hold, Completed
  priority       String    // Low, Medium, High, Urgent
  deadline       DateTime
  estimatedHours Float?
  actualHours    Float?
  tags           String?   // Comma separated values
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  project        Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      Int
  assignee       User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId     String?
  creator        User      @relation("TaskCreator", fields: [creatorId], references: [id])
  creatorId      String
  comments       Comment[]
  timeEntries    TimeEntry[]
  attachments    Attachment[]
}

// Comment model
model Comment {
  id        Int      @id @default(autoincrement())
  text      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

// Attachment model
model Attachment {
  id         Int      @id @default(autoincrement())
  name       String
  url        String
  type       String
  size       Int
  uploadedAt DateTime @default(now())

  // Relations
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId     Int
  uploadedBy String   // Store user ID directly
}

// TimeEntry model
model TimeEntry {
  id          Int      @id @default(autoincrement())
  description String
  minutes     Int
  date        DateTime
  createdAt   DateTime @default(now())

  // Relations
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      Int
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

// Notification model
model Notification {
  id         Int      @id @default(autoincrement())
  title      String
  message    String   @db.Text
  type       String   // task_assigned, task_completed, etc.
  entityType String?  // task, project, etc.
  entityId   Int?
  read       Boolean  @default(false)
  actionUrl  String?
  createdAt  DateTime @default(now())

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
}

// ActivityLog model
model ActivityLog {
  id         Int      @id @default(autoincrement())
  action     String
  entityType String   // project, task, user
  entityId   String   // Can be Int or String, using String to cover both
  entityName String
  details    String?  @db.Text
  timestamp  DateTime @default(now())

  // Relations
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}
